{"version":3,"file":"api.js","sources":["ng://api/lib/api.service.ts","ng://api/lib/api.component.ts","ng://api/lib/api.module.ts","ng://api/lib/services/configuration.service.ts","ng://api/lib/services/http-service.base.ts","ng://api/lib/services/details-http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-api',\n  template: `\n    <p>\n      api works!\n    </p>\n  `,\n  styles: []\n})\nexport class ApiComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ApiComponent } from './api.component';\n\n@NgModule({\n  declarations: [ApiComponent],\n  imports: [\n  ],\n  exports: [ApiComponent]\n})\nexport class ApiModule { }\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { IpConfig } from 'types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  ips: IpConfig;\r\n\r\n  constructor(\r\n    private http: HttpClient) {\r\n  }\r\n\r\n  initConfiguration(path): Promise<any> {\r\n    \r\n    return combineLatest(\r\n      this.http.get<IpConfig>( path ),\r\n    ).pipe(\r\n      tap(response => [this.ips] = response),\r\n    ).toPromise();\r\n  }\r\n}\r\n","import { HttpClient,  HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestModel } from 'types';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Injectable()\r\nexport abstract class HttpServiceBase {\r\n\r\n\r\n  index = 0;\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: ConfigurationService,\r\n  ) { }\r\n\r\n  get$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.get<T>(httpRequest.fullUrl, { params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  post$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.post<T>(httpRequest.fullUrl, httpRequest.body,\r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n   \r\n}\r\n","import { Injectable } from '@angular/core'; \nimport { Observable } from 'rxjs';\nimport { HttpRequestModel, Details, IAddressee } from 'types';\nimport { HttpServiceBase } from './http-service.base';\n\n@Injectable({  providedIn: 'root'})\nexport class DetailsHttpService extends HttpServiceBase  {\n\n  private get _serverUrl(): string {\n    return `${this.config.ips.servicePath}details/`;\n  }\n\n  getDetails$(): Observable<Details[]> {\n\n    return this.get$(new HttpRequestModel({\n      url: this._serverUrl,\n      action: 'getDetails',\n    }));\n  }\n\n  getAddressee$(): Observable<IAddressee[]> {\n\n    return this.get$(new HttpRequestModel({\n      url: this._serverUrl,\n      action: 'getAddressee',\n    }));\n  }\n\n  addAddressee$(name): Observable<boolean> {\n\n    return this.post$(new HttpRequestModel({\n      url: this._serverUrl,\n      action: 'addAddressee',\n      body: {name}\n    }));\n  }\n\n  \n  addOrUpdateDetails$(senderId, details: any): Observable<boolean> {\n    details = {senderId, ...details}\n    return this.post$(new HttpRequestModel({\n      url: this._serverUrl,\n      action: 'addOrUpdateDetails',\n      body: details\n    }));\n  }\n\n}\n\n\n"],"names":[],"mappings":"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"}